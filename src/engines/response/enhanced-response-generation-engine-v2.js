#!/usr/bin/env node
/**
 * Enhanced ResponseGenerationEngine v2.0
 * 
 * üéØ Phase 7H.2: Áµ±ÂêàÂàÜÊûê„Éë„Ç§„Éó„É©„Ç§„É≥„ÉªÂøúÁ≠îÁîüÊàê„Ç∑„Çπ„ÉÜ„É†
 * üß† DynamicTemplate„ÉªEmotion„ÉªPersonalÁµ±Âêà„Å´„Çà„ÇãÊ¨°‰∏ñ‰ª£ÂøúÁ≠îÁîüÊàê
 * üìä ÊñáËÑàÁêÜËß£Âº∑Âåñ„ÉªÂìÅË≥™ÊúÄÈÅ©Âåñ„ÉªÂÄã‰∫∫ÁâπÂåñÂøúÁ≠îÁîüÊàê
 */

import { AdvancedEmotionAnalyzer } from '../../analyzers/advanced-emotion-analyzer.js';
import { PersonalResponseAdapter } from '../../systems/adapters/personal-response-adapter.js';
import { DynamicTechnicalPatterns } from './dynamic-technical-patterns.js';
import { VocabularyDiversifier } from '../language/vocabulary-diversifier.js';
import { persistentLearningDB } from '../../data/persistent-learning-db.js';

/**
 * Áµ±ÂêàÂàÜÊûêÁµêÊûú„Éá„Éº„ÇøÊßãÈÄ†
 */
export class UnifiedAnalysisResult {
    constructor(userInput, conversationHistory = []) {
        this.timestamp = Date.now();
        this.userInput = userInput;
        this.conversationHistory = conversationHistory;
        
        // ÂêÑÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†„ÅÆÁµêÊûú
        this.templateAnalysis = null;     // DynamicResponseTemplateEngine
        this.emotionAnalysis = null;      // AdvancedEmotionAnalyzer
        this.personalAnalysis = null;     // PersonalResponseAdapter
        this.technicalAnalysis = null;    // DynamicTechnicalPatterns
        
        // Áµ±ÂêàÁµêÊûú
        this.contextEnrichment = null;    // ÊñáËÑàÁêÜËß£Âº∑ÂåñÁµêÊûú
        this.responseStrategy = null;     // ÂøúÁ≠îÊà¶Áï•Ê±∫ÂÆö
        this.qualityMetrics = null;       // ÂìÅË≥™Ë©ï‰æ°ÊåáÊ®ô
        
        // „É°„Çø„Éá„Éº„Çø
        this.processingTime = 0;
        this.confidence = 0;
        this.systemLoad = this.getSystemLoad();
    }
    
    getSystemLoad() {
        return {
            memory: process.memoryUsage(),
            uptime: process.uptime(),
            timestamp: Date.now()
        };
    }
}

/**
 * ÊñáËÑàÁêÜËß£Âº∑Âåñ„Ç®„É≥„Ç∏„É≥ÔºàContextTrackingSystemÁµ±ÂêàÁâàÔºâ
 */
export class ContextEnrichmentEngine {
    constructor() {
        this.contextDepthThreshold = 0.6;
        this.semanticSimilarityThreshold = 0.4;
        this.continuityBonus = 0.2;
        
        // ContextTrackingSystemÁµ±Âêà
        this.initializeContextTracker();
        
        console.log('‚úÖ ContextEnrichmentEngineÂàùÊúüÂåñÂÆå‰∫Ü');
    }
    
    /**
     * ContextTrackingSystemÁµ±ÂêàÂàùÊúüÂåñ
     */
    async initializeContextTracker() {
        try {
            const { ContextTrackingSystem } = await import('../dialogue/context-tracking-system.js');
            this.contextTracker = new ContextTrackingSystem();
            console.log('üîó ContextTrackingSystemÁµ±ÂêàÂÆå‰∫Ü');
        } catch (error) {
            console.warn('‚ö†Ô∏è ContextTrackingSystemÁµ±ÂêàÂ§±Êïó„ÄÅÂÜÖËîµ„Ç∑„Çπ„ÉÜ„É†‰ΩøÁî®:', error.message);
            this.contextTracker = null;
        }
    }
    
    /**
     * ÊñáËÑàÂàÜÊûê„ÉªÂº∑ÂåñÂá¶ÁêÜÔºàContextTrackingSystemÁµ±ÂêàÁâàÔºâ
     */
    async enrichContext(analysisResult) {
        const startTime = Date.now();
        
        try {
            let enrichment = {};
            
            // ContextTrackingSystemÂÑ™ÂÖà‰ΩøÁî®
            if (this.contextTracker) {
                const contextAnalysis = await this.contextTracker.trackContext(
                    analysisResult.userInput,
                    analysisResult.conversationHistory || []
                );
                
                // ContextTrackingSystem„ÅÆÁµêÊûú„ÇíÁµ±Âêà
                enrichment = {
                    // È´òÂ∫¶ÊñáËÑàÂàÜÊûêÁµêÊûú
                    contextDepth: contextAnalysis.contextDepth,
                    topicEvolution: contextAnalysis.topicEvolution,
                    referenceChain: contextAnalysis.referenceChain,
                    contextualEntities: contextAnalysis.contextualEntities,
                    temporalFlow: contextAnalysis.temporalFlow,
                    contextBreaks: contextAnalysis.contextBreaks,
                    
                    // Êó¢Â≠òÂàÜÊûê„Å®„ÅÆÁµ±Âêà
                    conversationalContinuity: this.analyzeConversationalFlow(analysisResult),
                    topicalCoherence: this.analyzeTopicalCoherence(analysisResult),
                    emotionalProgression: this.analyzeEmotionalProgression(analysisResult),
                    personalContextualFit: this.analyzePersonalContextualFit(analysisResult),
                    technicalContextualDepth: this.analyzeTechnicalContext(analysisResult),
                    
                    // ContextTrackingSystemËøΩÂä†„É°„Éà„É™„ÇØ„Çπ
                    trackingMetrics: contextAnalysis.trackingMetrics,
                    contextualState: contextAnalysis.contextualState
                };
                
                console.log(`üîó ContextTrackingSystemÊ¥ªÁî®: Ê∑±Â∫¶=${contextAnalysis.contextDepth}, Ë©±È°åÂ§âÈÅ∑=${contextAnalysis.topicEvolution.length}‰ª∂`);
            } else {
                // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÂÜÖËîµ„Ç∑„Çπ„ÉÜ„É†‰ΩøÁî®
                enrichment = {
                    conversationalContinuity: this.analyzeConversationalFlow(analysisResult),
                    topicalCoherence: this.analyzeTopicalCoherence(analysisResult),
                    emotionalProgression: this.analyzeEmotionalProgression(analysisResult),
                    personalContextualFit: this.analyzePersonalContextualFit(analysisResult),
                    technicalContextualDepth: this.analyzeTechnicalContext(analysisResult)
                };
            }
            
            // Áµ±ÂêàÊñáËÑà„Çπ„Ç≥„Ç¢Ë®àÁÆóÔºàÂº∑ÂåñÁâàÔºâ
            enrichment.overallContextScore = this.calculateEnhancedContextScore(enrichment);
            enrichment.contextConfidence = this.calculateContextConfidence(enrichment);
            enrichment.processingTime = Date.now() - startTime;
            
            analysisResult.contextEnrichment = enrichment;
            
            console.log(`üìä ÊñáËÑàÁêÜËß£Âº∑ÂåñÂÆå‰∫Ü: „Çπ„Ç≥„Ç¢=${enrichment.overallContextScore.toFixed(2)}, ‰ø°È†ºÂ∫¶=${enrichment.contextConfidence.toFixed(2)}`);
            
            return enrichment;
            
        } catch (error) {
            console.error('‚ùå ÊñáËÑàÁêÜËß£Âº∑Âåñ„Ç®„É©„Éº:', error.message);
            return this.createFallbackEnrichment();
        }
    }
    
    analyzeConversationalFlow(analysisResult) {
        const history = analysisResult.conversationHistory;
        if (history.length === 0) return { continuity: 0, flow: 'initial' };
        
        // ‰ºöË©±„ÅÆÈÄ£Á∂öÊÄßÂàÜÊûê
        const recentTurns = history.slice(-3);
        let flowScore = 0.5; // „Éô„Éº„Çπ„Çπ„Ç≥„Ç¢
        
        // Ë©±È°å„ÅÆÁ∂ôÁ∂öÊÄß
        if (recentTurns.length > 1) {
            const topicSimilarity = this.calculateTopicSimilarity(
                recentTurns[recentTurns.length - 1],
                analysisResult.userInput
            );
            flowScore += topicSimilarity * this.continuityBonus;
        }
        
        return {
            continuity: Math.min(flowScore, 1.0),
            flow: flowScore > 0.7 ? 'continuous' : flowScore > 0.4 ? 'transitional' : 'divergent',
            turnCount: history.length
        };
    }
    
    analyzeTopicalCoherence(analysisResult) {
        // Ë©±È°å„ÅÆ‰∏ÄË≤´ÊÄßÂàÜÊûê
        const technical = analysisResult.technicalAnalysis;
        const template = analysisResult.templateAnalysis;
        
        let coherence = 0.5;
        
        if (technical?.isTechnical) {
            coherence += 0.3;
        }
        
        if (template?.templateType && template.confidence > 0.5) {
            coherence += 0.2;
        }
        
        return {
            score: Math.min(coherence, 1.0),
            factors: ['technical_continuity', 'template_alignment']
        };
    }
    
    analyzeEmotionalProgression(analysisResult) {
        const emotion = analysisResult.emotionAnalysis;
        if (!emotion) return { progression: 'neutral', stability: 0.5 };
        
        // ÊÑüÊÉÖ„ÅÆÈÄ≤Ë°å„ÉªÂÆâÂÆöÊÄßÂàÜÊûê
        return {
            progression: emotion.dominantEmotion || 'neutral',
            stability: emotion.confidence || 0.5,
            trend: 'stable' // Á∞°Áï•ÂÆüË£Ö
        };
    }
    
    analyzePersonalContextualFit(analysisResult) {
        const personal = analysisResult.personalAnalysis;
        if (!personal) return { fit: 0.5, adaptation: 'standard' };
        
        // ÂÄã‰∫∫ÁâπÊÄß„Å®„ÅÆÈÅ©ÂêàÊÄßÂàÜÊûê
        return {
            fit: personal.adaptationStrength || 0.5,
            adaptation: personal.adaptationStrength > 0.7 ? 'high' : 'standard',
            factors: personal.personalFactors || {}
        };
    }
    
    analyzeTechnicalContext(analysisResult) {
        const technical = analysisResult.technicalAnalysis;
        if (!technical?.isTechnical) return { depth: 0, category: 'general' };
        
        return {
            depth: technical.confidence || 0.5,
            category: technical.category || 'general',
            complexity: technical.confidence > 0.7 ? 'high' : 'medium'
        };
    }
    
    calculateOverallContextScore(enrichment) {
        const weights = {
            conversationalContinuity: 0.25,
            topicalCoherence: 0.25,
            emotionalProgression: 0.2,
            personalContextualFit: 0.15,
            technicalContextualDepth: 0.15
        };
        
        let score = 0;
        score += enrichment.conversationalContinuity.continuity * weights.conversationalContinuity;
        score += enrichment.topicalCoherence.score * weights.topicalCoherence;
        score += enrichment.emotionalProgression.stability * weights.emotionalProgression;
        score += enrichment.personalContextualFit.fit * weights.personalContextualFit;
        score += enrichment.technicalContextualDepth.depth * weights.technicalContextualDepth;
        
        return score;
    }
    
    /**
     * ContextTrackingSystemÁµ±ÂêàÁâàÊñáËÑà„Çπ„Ç≥„Ç¢Ë®àÁÆó
     */
    calculateEnhancedContextScore(enrichment) {
        // ContextTrackingSystem„ÅÆÈ´òÂ∫¶„É°„Éà„É™„ÇØ„Çπ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÂÑ™ÂÖà‰ΩøÁî®
        if (enrichment.trackingMetrics && enrichment.contextualState) {
            const contextWeights = {
                // ContextTrackingSystemÈ´òÂ∫¶„É°„Éà„É™„ÇØ„Çπ
                overallContextQuality: 0.3,
                topicStability: 0.15,
                referenceClarity: 0.1,
                temporalConsistency: 0.1,
                
                // Êó¢Â≠òÂàÜÊûê„Å®„ÅÆÁµ±Âêà
                conversationalContinuity: 0.15,
                topicalCoherence: 0.1,
                emotionalProgression: 0.05,
                personalContextualFit: 0.05
            };
            
            let enhancedScore = 0;
            
            // ContextTrackingSystem„É°„Éà„É™„ÇØ„Çπ
            enhancedScore += (enrichment.trackingMetrics.overallContextQuality || 0.5) * contextWeights.overallContextQuality;
            enhancedScore += (enrichment.trackingMetrics.topicStability || 0.5) * contextWeights.topicStability;
            enhancedScore += (enrichment.trackingMetrics.referenceClarity || 0.5) * contextWeights.referenceClarity;
            enhancedScore += (enrichment.trackingMetrics.temporalConsistency || 0.5) * contextWeights.temporalConsistency;
            
            // Êó¢Â≠òÂàÜÊûê„Å®„ÅÆÁµ±ÂêàÔºàÂà©Áî®ÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
            if (enrichment.conversationalContinuity) {
                enhancedScore += enrichment.conversationalContinuity.continuity * contextWeights.conversationalContinuity;
            }
            if (enrichment.topicalCoherence) {
                enhancedScore += enrichment.topicalCoherence.score * contextWeights.topicalCoherence;
            }
            if (enrichment.emotionalProgression) {
                enhancedScore += enrichment.emotionalProgression.stability * contextWeights.emotionalProgression;
            }
            if (enrichment.personalContextualFit) {
                enhancedScore += enrichment.personalContextualFit.fit * contextWeights.personalContextualFit;
            }
            
            return Math.min(enhancedScore, 1.0);
        } else {
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÂæìÊù•ÊñπÂºè
            return this.calculateOverallContextScore(enrichment);
        }
    }
    
    calculateContextConfidence(enrichment) {
        // ÂêÑË¶ÅÁ¥†„ÅÆ‰ø°È†ºÂ∫¶„Åã„ÇâÁ∑èÂêà‰ø°È†ºÂ∫¶Ë®àÁÆó
        const factors = [
            enrichment.conversationalContinuity.continuity,
            enrichment.topicalCoherence.score,
            enrichment.emotionalProgression.stability,
            enrichment.personalContextualFit.fit,
            enrichment.technicalContextualDepth.depth
        ];
        
        const avg = factors.reduce((sum, f) => sum + f, 0) / factors.length;
        const variance = factors.reduce((sum, f) => sum + Math.pow(f - avg, 2), 0) / factors.length;
        
        // ÂàÜÊï£„ÅåÂ∞è„Åï„ÅÑ„Åª„Å©‰ø°È†ºÂ∫¶„ÅåÈ´ò„ÅÑ
        return Math.max(0.3, 1 - Math.sqrt(variance));
    }
    
    calculateTopicSimilarity(turn1, currentInput) {
        // Á∞°Áï•ÁâàË©±È°åÈ°û‰ººÂ∫¶Ë®àÁÆó
        const text1 = (typeof turn1 === 'string' ? turn1 : (turn1?.content || turn1?.message || turn1?.userMessage || '')).toLowerCase();
        const text2 = currentInput.toLowerCase();
        
        const words1 = new Set(text1.split(/\s+/).filter(w => w.length > 2));
        const words2 = new Set(text2.split(/\s+/).filter(w => w.length > 2));
        
        const intersection = new Set([...words1].filter(w => words2.has(w)));
        const union = new Set([...words1, ...words2]);
        
        return union.size > 0 ? intersection.size / union.size : 0;
    }
    
    createFallbackEnrichment() {
        return {
            conversationalContinuity: { continuity: 0.5, flow: 'transitional' },
            topicalCoherence: { score: 0.5, factors: [] },
            emotionalProgression: { progression: 'neutral', stability: 0.5 },
            personalContextualFit: { fit: 0.5, adaptation: 'standard' },
            technicalContextualDepth: { depth: 0.3, category: 'general' },
            overallContextScore: 0.5,
            contextConfidence: 0.5,
            processingTime: 0
        };
    }
}

/**
 * Enhanced ResponseGenerationEngine v2.0 „É°„Ç§„É≥„ÇØ„É©„Çπ
 */
export class EnhancedResponseGenerationEngineV2 {
    constructor(options = {}) {
        // Áµ±Âêà„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÂàùÊúüÂåñ
        this.emotionAnalyzer = new AdvancedEmotionAnalyzer();
        this.personalAdapter = null; // Â§ñÈÉ®„Åã„ÇâÊ≥®ÂÖ•
        this.technicalPatterns = new DynamicTechnicalPatterns();
        
        // Êñ∞Ë¶è„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
        this.contextEnrichmentEngine = new ContextEnrichmentEngine();
        
        // Ë™ûÂΩôÂ§öÊßòÂåñ„Ç®„É≥„Ç∏„É≥Ôºà„É≠„Éº„Ç´„É´„ÉªÁÑ°ÊñôËá™ÁÑ∂ÊÄßÂêë‰∏äÔºâ
        this.vocabularyDiversifier = new VocabularyDiversifier();
        
        // Ë®≠ÂÆö
        this.config = {
            enableEmotionAnalysis: true,
            enablePersonalAdaptation: true,
            enableContextEnrichment: true,
            enableVocabularyDiversification: true, // Ë™ûÂΩôÂ§öÊßòÂåñ
            enableLearningIntegration: true, // Â≠¶Áøí„Éá„Éº„ÇøÁµ±Âêà
            qualityThreshold: 0.7,
            maxProcessingTime: 5000,
            ...options
        };
        
        // Áµ±Ë®à
        this.stats = {
            totalRequests: 0,
            successfulResponses: 0,
            averageProcessingTime: 0,
            averageQualityScore: 0,
            lastProcessingTime: Date.now()
        };
        
        console.log('üöÄ Enhanced ResponseGenerationEngine v2.0 + Vocabulary Diversifier + Learning Integration ÂàùÊúüÂåñÂÆå‰∫Ü');
        console.log(`üìä Ë®≠ÂÆö: Emotion=${this.config.enableEmotionAnalysis}, Personal=${this.config.enablePersonalAdaptation}, VocabDiversify=${this.config.enableVocabularyDiversification}, Learning=${this.config.enableLearningIntegration}`);
    }
    
    /**
     * PersonalResponseAdapterË®≠ÂÆö
     */
    setPersonalAdapter(personalAdapter) {
        this.personalAdapter = personalAdapter;
        console.log('‚úÖ PersonalResponseAdapterÁµ±ÂêàÂÆå‰∫Ü');
    }
    
    /**
     * Áµ±ÂêàÂøúÁ≠îÁîüÊàê„É°„Ç§„É≥Âá¶ÁêÜ
     */
    async generateUnifiedResponse(userInput, conversationHistory = [], userProfile = {}) {
        const startTime = Date.now();
        this.stats.totalRequests++;
        
        try {
            console.log(`üéØ Enhanced ResponseGeneration v2.0 ÈñãÂßã: "${userInput.substring(0, 50)}..."`);
            
            // DialogueAPI„Åã„ÇâÂàÜÊûê„Éá„Éº„Çø„ÅåÊ∏°„Åï„Çå„ÅüÂ†¥Âêà„ÅÆÂá¶ÁêÜ
            let actualConversationHistory = [];
            let externalAnalysisData = null;
            
            if (conversationHistory && conversationHistory.generalAnalysis) {
                // conversationHistory„ÅåanalysisData„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÂ†¥Âêà
                externalAnalysisData = conversationHistory;
                actualConversationHistory = conversationHistory.conversationHistory || [];
                console.log(`üîó Â§ñÈÉ®ÂàÜÊûê„Éá„Éº„ÇøÂèó‰ø°: generalAnalysis.category="${externalAnalysisData.generalAnalysis?.category}"`);
            } else {
                // ÈÄöÂ∏∏„ÅÆ‰ºöË©±Â±•Ê≠¥ÈÖçÂàó„ÅÆÂ†¥Âêà
                actualConversationHistory = Array.isArray(conversationHistory) ? conversationHistory : [];
            }
            
            // 1. Áµ±ÂêàÂàÜÊûêÁµêÊûúÂàùÊúüÂåñ
            const analysisResult = new UnifiedAnalysisResult(userInput, actualConversationHistory);
            
            // 2. Â§ñÈÉ®ÂàÜÊûê„Éá„Éº„Çø„Åå„ÅÇ„Çå„Å∞Áµ±ÂêàÔºàPhase 1Ê±éÁî®AIÂåñÂØæÂøúÔºâ
            if (externalAnalysisData) {
                if (externalAnalysisData.generalAnalysis) {
                    analysisResult.generalAnalysis = externalAnalysisData.generalAnalysis;
                    console.log(`üîó Â§ñÈÉ®generalAnalysisÁµ±Âêà: category="${analysisResult.generalAnalysis.category}"`);
                }
                if (externalAnalysisData.emotionAnalysis) {
                    analysisResult.emotionAnalysis = externalAnalysisData.emotionAnalysis;
                }
                if (externalAnalysisData.templateAnalysis) {
                    analysisResult.templateAnalysis = externalAnalysisData.templateAnalysis;
                }
                if (externalAnalysisData.personalAnalysis) {
                    analysisResult.personalAnalysis = externalAnalysisData.personalAnalysis;
                }
            }
            
            // 3. ‰∏çË∂≥„Åó„Å¶„ÅÑ„ÇãÂàÜÊûê„Éá„Éº„Çø„ÇíÂÜÖÈÉ®„ÅßË£úÂÆå
            if (!analysisResult.technicalAnalysis) {
                await this.performUnifiedAnalysis(analysisResult, userProfile);
            }
            
            console.log(`üîç Áµ±ÂêàÂàÜÊûêÂÆå‰∫Ü: generalAnalysis=`, analysisResult.generalAnalysis, `technicalAnalysis=`, analysisResult.technicalAnalysis);
            
            // 4. ÊñáËÑàÁêÜËß£Âº∑Âåñ
            if (this.config.enableContextEnrichment) {
                await this.contextEnrichmentEngine.enrichContext(analysisResult);
            }
            
            // 5. ÂøúÁ≠îÊà¶Áï•Ê±∫ÂÆö
            const responseStrategy = this.determineResponseStrategy(analysisResult);
            analysisResult.responseStrategy = responseStrategy;
            
            // 5. Áµ±ÂêàÂøúÁ≠îÁîüÊàê
            const finalResponse = await this.generateFinalResponse(analysisResult);
            
            // 6. ÂìÅË≥™Ë©ï‰æ°„ÉªÊúÄÈÅ©Âåñ
            const qualityMetrics = this.evaluateResponseQuality(analysisResult, finalResponse);
            analysisResult.qualityMetrics = qualityMetrics;
            
            // 7. Áµ±Ë®àÊõ¥Êñ∞
            analysisResult.processingTime = Date.now() - startTime;
            this.updateStats(analysisResult, true);
            
            console.log(`‚úÖ Enhanced ResponseGeneration v2.0 ÂÆå‰∫Ü: ${analysisResult.processingTime}ms, ÂìÅË≥™=${qualityMetrics.overallScore.toFixed(2)}`);
            
            // Ë™ûÂΩôÂ§öÊßòÂåñÁµ±Ë®à„ÅÆÂèéÈõÜÔºàÈÅÖÂª∂Ë™≠„ÅøËæº„ÅøÂØæÂøúÔºâ
            const vocabularyStats = this.vocabularyDiversifier ? {
                dictionaryEntries: this.vocabularyDiversifier.dictionaryDB?.getSize() || 0,
                synonymMapSize: this.vocabularyDiversifier.dictionaryDB?.synonymMap?.size || 0,
                diversificationEnabled: this.config.enableVocabularyDiversification,
                diversificationApplied: finalResponse !== analysisResult.userInput,
                dictionaryStatus: this.vocabularyDiversifier.dictionaryDB ? 'loaded' : 'loading',
                internalSynonyms: Object.keys(this.vocabularyDiversifier.synonymDict?.emotionSynonyms || {}).length
            } : null;

            return {
                response: finalResponse,
                analysisResult: analysisResult,
                analysis: {
                    vocabularyDiversification: vocabularyStats,
                    dictionaryStats: vocabularyStats,
                    processingTime: analysisResult.processingTime,
                    qualityScore: qualityMetrics.overallScore,
                    responseStrategy: responseStrategy.primary
                },
                metadata: {
                    processingTime: analysisResult.processingTime,
                    qualityScore: qualityMetrics.overallScore,
                    responseStrategy: responseStrategy.primary,
                    systemVersion: 'v2.0'
                }
            };
            
        } catch (error) {
            console.error('‚ùå Enhanced ResponseGeneration v2.0 „Ç®„É©„Éº:', error.message);
            this.updateStats(null, false);
            
            return {
                response: "Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„Åå„ÄÅ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ",
                error: error.message,
                metadata: {
                    processingTime: Date.now() - startTime,
                    systemVersion: 'v2.0'
                }
            };
        }
    }
    
    /**
     * Áµ±ÂêàÂàÜÊûêÂÆüË°å
     */
    async performUnifiedAnalysis(analysisResult, userProfile) {
        const analysisPromises = [];
        
        // ÊäÄË°ì„Éë„Çø„Éº„É≥ÂàÜÊûêÔºàÂêåÊúüÔºâ
        try {
            analysisResult.technicalAnalysis = this.technicalPatterns.isTechnicalQuery(analysisResult.userInput);
        } catch (err) {
            console.warn('ÊäÄË°ì„Éë„Çø„Éº„É≥ÂàÜÊûê„Ç®„É©„Éº:', err.message);
            analysisResult.technicalAnalysis = { isTechnical: false, confidence: 0 };
        }
        
        
        // ÊÑüÊÉÖÂàÜÊûê
        if (this.config.enableEmotionAnalysis) {
            analysisPromises.push(
                this.analyzeEmotionalState(analysisResult)
                    .catch(err => console.warn('ÊÑüÊÉÖÂàÜÊûê„Ç®„É©„Éº:', err.message))
            );
        }
        
        // ÂÄã‰∫∫ÁâπÂåñÂàÜÊûê
        if (this.config.enablePersonalAdaptation && this.personalAdapter) {
            analysisPromises.push(
                this.analyzePersonalContext(analysisResult, userProfile)
                    .catch(err => console.warn('ÂÄã‰∫∫ÁâπÂåñÂàÜÊûê„Ç®„É©„Éº:', err.message))
            );
        }
        
        // Â≠¶Áøí„Éá„Éº„ÇøÁµ±ÂêàÂàÜÊûê
        if (this.config.enableLearningIntegration) {
            analysisPromises.push(
                this.analyzeLearningContext(analysisResult, userProfile)
                    .catch(err => console.warn('Â≠¶Áøí„Éá„Éº„ÇøÂàÜÊûê„Ç®„É©„Éº:', err.message))
            );
        }
        
        // ‰∏¶ÂàóÂÆüË°å
        await Promise.allSettled(analysisPromises);
    }
    
    
    async analyzeEmotionalState(analysisResult) {
        // AdvancedEmotionAnalyzer„Å®„ÅÆÁµ±Âêà
        const emotion = await this.emotionAnalyzer.analyzeAdvancedEmotion(
            analysisResult.userInput,
            analysisResult.conversationHistory
        );
        analysisResult.emotionAnalysis = emotion;
    }
    
    async analyzePersonalContext(analysisResult, userProfile) {
        // PersonalResponseAdapter„Å®„ÅÆÁµ±Âêà
        if (this.personalAdapter && this.personalAdapter.analyzePersonalContext) {
            const personal = await this.personalAdapter.analyzePersonalContext(
                analysisResult.userInput,
                userProfile,
                analysisResult.conversationHistory
            );
            analysisResult.personalAnalysis = personal;
        }
    }
    
    async analyzeLearningContext(analysisResult, userProfile) {
        // Â≠¶Áøí„Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâÈñ¢ÈÄ£ÊÉÖÂ†±„ÇíÂèñÂæó
        try {
            const userId = userProfile?.userId || 'default';
            
            // „É¶„Éº„Ç∂„Éº„ÅÆÈñ¢‰øÇÊÄß„Éá„Éº„Çø„ÇíÂèñÂæó
            const userRelations = await persistentLearningDB.getUserRelations(userId);
            
            // ‰ºöË©±Â±•Ê≠¥„ÇíÂèñÂæó
            const conversationHistory = await persistentLearningDB.getConversationHistory(userId, 5);
            
            // Â≠¶ÁøíÁµ±Ë®à„ÇíÂèñÂæó
            const learningStats = await persistentLearningDB.getLearningStats();
            
            // ÂàÜÊûêÁµêÊûú„Å´Â≠¶Áøí„Éá„Éº„Çø„ÇíÁµ±Âêà
            analysisResult.learningAnalysis = {
                userRelations: userRelations || [],
                pastConversations: conversationHistory || [],
                learningStats: learningStats || {},
                hasLearningData: (userRelations?.length > 0) || (conversationHistory?.length > 0),
                adaptationStrength: this.calculateAdaptationStrength(userRelations, conversationHistory)
            };
            
            console.log(`üìö Â≠¶Áøí„Éá„Éº„ÇøÁµ±Âêà: Èñ¢‰øÇÊÄß${userRelations?.length || 0}‰ª∂, Â±•Ê≠¥${conversationHistory?.length || 0}‰ª∂`);
        } catch (error) {
            console.warn('Â≠¶Áøí„Éá„Éº„ÇøÁµ±Âêà„Ç®„É©„Éº:', error.message);
            analysisResult.learningAnalysis = {
                userRelations: [],
                pastConversations: [],
                hasLearningData: false,
                adaptationStrength: 0
            };
        }
    }
    
    calculateAdaptationStrength(userRelations, conversationHistory) {
        const relationScore = Math.min((userRelations?.length || 0) / 10, 1.0);
        const historyScore = Math.min((conversationHistory?.length || 0) / 5, 1.0);
        return (relationScore + historyScore) / 2;
    }
    
    /**
     * ÂøúÁ≠îÊà¶Áï•Ê±∫ÂÆö
     */
    determineResponseStrategy(analysisResult) {
        const strategy = {
            primary: 'general', // „Éá„Éï„Ç©„É´„Éà„Çí'general'„Å´Â§âÊõ¥ÔºàÊ±éÁî®AIÂåñÔºâ
            secondary: [],
            confidence: 0.5,
            reasoning: []
        };
        
        // ÊÑüÊÉÖ„ÉªÊó•Â∏∏‰ºöË©±„ÇíÊúÄÂÑ™ÂÖà
        const generalAnalysis = analysisResult.generalAnalysis;
        if (generalAnalysis?.category && ['gratitude', 'emotional_support', 'greeting', 'learning_support'].includes(generalAnalysis.category)) {
            strategy.primary = 'general';
            strategy.confidence += 0.4;
            strategy.reasoning.push(`ÊÑüÊÉÖ„ÉªÊó•Â∏∏‰ºöË©±Ê§úÂá∫: ${generalAnalysis.category}`);
        }
        // ÊäÄË°ìÁöÑ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅØÊ¨°„ÅÆÂÑ™ÂÖàÂ∫¶
        else if (analysisResult.technicalAnalysis?.isTechnical) {
            strategy.primary = 'technical';
            strategy.confidence += 0.3;
            strategy.reasoning.push('ÊäÄË°ìÁöÑÂÜÖÂÆπÊ§úÂá∫');
        }
        
        // „ÉÜ„É≥„Éó„É¨„Éº„ÉàÈÅ©Áî®Êà¶Áï•
        if (analysisResult.templateAnalysis?.confidence > 0.5) {
            strategy.secondary.push('template_driven');
            strategy.confidence += 0.2;
            strategy.reasoning.push('„ÉÜ„É≥„Éó„É¨„Éº„ÉàÈÅ©Áî®');
        }
        
        // ÊÑüÊÉÖËÄÉÊÖÆÊà¶Áï•
        if (analysisResult.emotionAnalysis?.confidence > 0.6) {
            strategy.secondary.push('emotion_aware');
            strategy.confidence += 0.15;
            strategy.reasoning.push('ÊÑüÊÉÖÈÖçÊÖÆ');
        }
        
        // Â≠¶Áøí„Éá„Éº„ÇøÊ¥ªÁî®Êà¶Áï•
        if (analysisResult.learningAnalysis?.hasLearningData) {
            strategy.secondary.push('learning_enhanced');
            strategy.confidence += analysisResult.learningAnalysis.adaptationStrength * 0.2;
            strategy.reasoning.push(`Â≠¶Áøí„Éá„Éº„ÇøÊ¥ªÁî® (Âº∑Â∫¶: ${(analysisResult.learningAnalysis.adaptationStrength * 100).toFixed(0)}%)`);
        }
        
        // ÂÄã‰∫∫ÁâπÂåñÊà¶Áï•
        if (analysisResult.personalAnalysis?.adaptationStrength > 0.6) {
            strategy.secondary.push('personalized');
            strategy.confidence += 0.15;
            strategy.reasoning.push('ÂÄã‰∫∫ÁâπÂåñ');
        }
        
        strategy.confidence = Math.min(strategy.confidence, 1.0);
        
        console.log(`üéØ ÂøúÁ≠îÊà¶Áï•Ê±∫ÂÆö: primary="${strategy.primary}", confidence=${strategy.confidence.toFixed(2)}, reasoning=[${strategy.reasoning.join(', ')}]`);
        
        return strategy;
    }
    
    /**
     * ÊúÄÁµÇÂøúÁ≠îÁîüÊàê
     */
    async generateFinalResponse(analysisResult) {
        const strategy = analysisResult.responseStrategy;
        let response = "";
        
        // Êà¶Áï•„Å´Âü∫„Å•„ÅèÂøúÁ≠îÁîüÊàê
        switch (strategy.primary) {
            case 'technical':
            case 'general':
                response = await this.generateGeneralResponse(analysisResult);
                break;
            case 'emotional':
                response = await this.generateEmotionalResponse(analysisResult);
                break;
            case 'personalized':
                response = await this.generatePersonalizedResponse(analysisResult);
                break;
            default:
                response = await this.generateBalancedResponse(analysisResult);
        }
        
        // ‰∫åÊ¨°Êà¶Áï•ÈÅ©Áî®
        for (const secondaryStrategy of strategy.secondary) {
            response = await this.applySecondaryStrategy(response, secondaryStrategy, analysisResult);
        }
        
        return response;
    }
    
    async generateGeneralResponse(analysisResult) {
        console.log(`üîç GeneralResponseÈñãÂßã: generalAnalysis=`, analysisResult.generalAnalysis, `technicalAnalysis=`, analysisResult.technicalAnalysis);
        
        const general = analysisResult.generalAnalysis || analysisResult.technicalAnalysis || { 
            category: 'general_conversation',
            confidence: 0.5,
            patterns: [],
            conversationType: 'statement'
        }; // ÂæåÊñπ‰∫íÊèõÊÄß + „Éá„Éï„Ç©„É´„ÉàÂÄ§
        const userInput = analysisResult.userInput;
        const template = analysisResult.templateAnalysis;
        
        // 1. Â≠¶Áøí„Éá„Éº„ÇøÂº∑ÂåñÂøúÁ≠îÁîüÊàê
        if (analysisResult.learningAnalysis?.hasLearningData) {
            const learningEnhancedResponse = await this.generateLearningEnhancedResponse(userInput, general, analysisResult.learningAnalysis);
            if (learningEnhancedResponse) {
                console.log(`üß† Â≠¶ÁøíÂº∑ÂåñÂøúÁ≠îÁîüÊàêÊàêÂäü: "${userInput}"`);
                return learningEnhancedResponse;
            }
        }
        
        // 2. ÊÑüÊÉÖ„ÉªÊó•Â∏∏‰ºöË©±ÈáçË¶ñ„ÅÆ„Ç´„ÉÜ„Ç¥„É™Âà•ÂøúÁ≠îÁîüÊàê
        console.log(`üîç „Ç´„ÉÜ„Ç¥„É™Âà•ÂøúÁ≠îÂà§ÂÆö: category="${general?.category}", userInput="${userInput}"`);
        if (general?.category) {
            switch (general.category) {
                case 'gratitude':
                    console.log(`üíù ÊÑüË¨ùÂøúÁ≠îÁîüÊàê: "${userInput}"`);
                    return await this.generateGratitudeResponse(userInput, general);
                case 'emotional_support':
                    console.log(`ü§ó ÊÑüÊÉÖ„Çµ„Éù„Éº„ÉàÂøúÁ≠îÁîüÊàê: "${userInput}"`);
                    return await this.generateEmotionalSupportResponse(userInput, general);
                case 'greeting':
                    console.log(`üëã Êå®Êã∂ÂøúÁ≠îÁîüÊàê: "${userInput}"`);
                    return await this.generateGreetingResponse(userInput, general);
                case 'learning_support':
                    console.log(`üìö Â≠¶Áøí„Çµ„Éù„Éº„ÉàÂøúÁ≠îÁîüÊàê: "${userInput}"`);
                    return await this.generateLearningSupportResponse(userInput, general);
                case 'comparison_request':
                    console.log(`‚öñÔ∏è ÊØîËºÉÂøúÁ≠îÁîüÊàê: "${userInput}"`);
                    return await this.generateComparisonResponse(userInput, general);
                case 'how_to_request':
                    console.log(`‚ùì ÊñπÊ≥ïÂøúÁ≠îÁîüÊàê: "${userInput}"`);
                    return await this.generateHowToResponse(userInput, general);
                case 'technical_inquiry':
                    console.log(`üîß ÊäÄË°ìÂøúÁ≠îÁîüÊàê: "${userInput}"`);
                    return await this.generateTechnicalInquiryResponse(userInput, general);
                default:
                    console.log(`üí¨ Ê±éÁî®ÂøúÁ≠îÁîüÊàê: "${userInput}" („Ç´„ÉÜ„Ç¥„É™: ${general.category})`);
                    return await this.generateGeneralConversationResponse(userInput, general);
            }
        }
        
        // 3. „Ç§„É≥„ÉÜ„É™„Ç∏„Çß„É≥„Éà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        return this.generateIntelligentFallback(userInput, { type: 'general', context: general });
    }
    
    async generateEmotionalResponse(analysisResult) {
        const emotion = analysisResult.emotionAnalysis;
        const userInput = analysisResult.userInput;
        const dominantEmotion = emotion?.dominantEmotion || 'neutral';
        let baseResponse;
        
        // ÊÑüË¨ùÂøúÁ≠î„ÅÆÂÖ∑‰ΩìÂåñ
        if (userInput.includes('„ÅÇ„Çä„Åå„Å®„ÅÜ') || userInput.includes('ÂèÇËÄÉ„Å´„Å™„Çä') || userInput.includes('Âä©„Åã„Çä')) {
            baseResponse = "„ÅäÂΩπ„Å´Á´ã„Å¶„Å¶Â¨â„Åó„ÅÑ„Åß„ÅôÔºÅ‰ªñ„Å´„ÇÇ„ÅîË≥™Âïè„Åå„Åî„Åñ„ÅÑ„Åæ„Åó„Åü„Çâ„ÄÅ„ÅÑ„Å§„Åß„ÇÇ„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™ÊäÄË°ìÁöÑ„Å™Ë™≤È°å„Åß„ÇÇ„Çµ„Éù„Éº„Éà„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ";
        }
        // „Éò„É´„ÉóË¶ÅÊ±Ç„ÅÆÂÖ∑‰ΩìÂåñ
        else if (userInput.includes('Âõ∞„Å£„Å¶') || userInput.includes('Âä©„Åë„Å¶') || userInput.includes('„Ç®„É©„Éº') || userInput.includes('Âãï„Åã„Å™„ÅÑ')) {
            baseResponse = "„ÅäÂõ∞„Çä„ÅÆÁä∂Ê≥Å„Çí„ÅäÂØü„Åó„Åó„Åæ„Åô„ÄÇÂÖ∑‰ΩìÁöÑ„Å™„Ç®„É©„ÉºÂÜÖÂÆπ„ÇÑÁô∫Áîü„Åó„Å¶„ÅÑ„ÇãÁä∂Ê≥Å„ÇíÊïô„Åà„Å¶„ÅÑ„Åü„Å†„Åë„Çå„Å∞„ÄÅËß£Ê±∫Á≠ñ„Çí„ÅîÊèêÊ°à„Åß„Åç„Åæ„Åô„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™ÂïèÈ°å„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü";
        }
        // ÊÑüÊÉÖÂà•ÂøúÁ≠î„ÅÆÂÖ∑‰ΩìÂåñ
        else {
            switch (dominantEmotion) {
                case 'excitement':
                    baseResponse = `„Å®„Å¶„ÇÇËààÂë≥Ê∑±„ÅÑ„ÅîË≥™Âïè„Åß„Åô„Å≠ÔºÅ„Äå${this.extractKeyTopic(userInput)}„Äç„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„Åè„ÅäÁ≠î„Åà„Åó„Åæ„Åô„ÄÇ`;
                    break;
                case 'curiosity':
                    baseResponse = `Êé¢Ê±ÇÂøÉÊ∫¢„Çå„Çã„ÅîË≥™Âïè„Åß„Åô„Å≠„ÄÇ„Äå${this.extractKeyTopic(userInput)}„Äç„Å´„Å§„ÅÑ„Å¶‰∏ÄÁ∑í„Å´ËÄÉ„Åà„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ`;
                    break;
                case 'frustration':
                    baseResponse = "„ÅäÂõ∞„Çä„ÅÆ„Çà„ÅÜ„Åß„Åô„Å≠„ÄÇÂïèÈ°åËß£Ê±∫„Å´Âêë„Åë„Å¶‰∏ÄÁ∑í„Å´Âèñ„ÇäÁµÑ„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇÂÖ∑‰ΩìÁöÑ„Å™Áä∂Ê≥Å„ÇíÊïô„Åà„Å¶„ÅÑ„Åü„Å†„Åë„Åæ„Åô„ÅãÔºü";
                    break;
                case 'satisfaction':
                    baseResponse = "ËâØ„ÅÑÊñπÂêë„Å´ÈÄ≤„Çì„Åß„ÅÑ„Çã„Çà„ÅÜ„Åß„Åô„Å≠„ÄÇ„Åï„Çâ„Å™„ÇãÂêë‰∏ä„Å´Âêë„Åë„Å¶„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ";
                    break;
                default:
                    baseResponse = await this.generateIntelligentFallback(userInput, { type: 'emotional', emotion: dominantEmotion });
            }
        }
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºàÊÑüÊÉÖÂøúÁ≠îÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification && baseResponse) {
            const context = {
                category: 'emotional_response',
                emotion: dominantEmotion,
                politeness: this.determinePoliteness(userInput, {}),
                intensity: this.determineIntensity(userInput),
                conversationHistory: analysisResult.conversationHistory || []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generatePersonalizedResponse(analysisResult) {
        let baseResponse;
        
        if (this.personalAdapter && this.personalAdapter.generatePersonalizedResponse) {
            baseResponse = await this.personalAdapter.generatePersonalizedResponse(
                analysisResult.userInput,
                analysisResult.personalAnalysis
            );
        } else {
            baseResponse = "„ÅÇ„Å™„Åü„ÅÆÁâπÊÄß„Å´Âêà„Çè„Åõ„Å¶ÂõûÁ≠î„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ";
        }
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºàÂÄã‰∫∫ÈÅ©ÂøúÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification && baseResponse) {
            const context = {
                category: 'personalized_response',
                personalAnalysis: analysisResult.personalAnalysis,
                politeness: this.determinePoliteness(analysisResult.userInput, {}),
                intensity: this.determineIntensity(analysisResult.userInput),
                conversationHistory: analysisResult.conversationHistory || []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generateBalancedResponse(analysisResult) {
        const userInput = analysisResult.userInput;
        const contextScore = analysisResult.contextEnrichment?.overallContextScore || 0.5;
        let baseResponse;
        
        // Â§©Ê∞óÁ≠â„ÅÆ‰∏ÄËà¨Ë≥™Âïè„Å∏„ÅÆÂÖ∑‰ΩìÁöÑÂØæÂøú
        if (userInput.includes('Â§©Ê∞ó')) {
            baseResponse = "Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„Åå„ÄÅ„É™„Ç¢„É´„Çø„Ç§„É†„ÅÆÂ§©Ê∞óÊÉÖÂ†±„ÅØÊèê‰æõ„Åß„Åç„Åæ„Åõ„Çì„ÄÇÂ§©Ê∞ó‰∫àÂ†±„ÅØÊ∞óË±°Â∫Å„ÅÆWeb„Çµ„Ç§„Éà„ÇÑÂ§©Ê∞ó„Ç¢„Éó„É™„Çí„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ„ÄÇ‰ªñ„ÅÆÊäÄË°ìÁöÑ„Å™„ÅîË≥™Âïè„Åß„Åó„Åü„Çâ„ÅäÁ≠î„Åà„Åß„Åç„Åæ„Åô„ÄÇ";
        }
        // Êå®Êã∂„Å∏„ÅÆÂØæÂøú
        else if (userInput.includes('„Åì„Çì„Å´') || userInput.includes('„Åä„ÅØ„Çà„ÅÜ') || userInput.includes('„Åì„Çì„Å∞„Çì')) {
            baseResponse = "„Åì„Çì„Å´„Å°„ÅØÔºÅÊäÄË°ìÁöÑ„Å™„ÅîË≥™Âïè„ÇÑ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Å´Èñ¢„Åô„Çã„ÅäÂõ∞„Çä„Åî„Å®„Åå„Åî„Åñ„ÅÑ„Åæ„Åó„Åü„Çâ„ÄÅ„ÅäÊ∞óËªΩ„Å´„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇ";
        }
        // ÊñáËÑà„Çπ„Ç≥„Ç¢„Å´Âü∫„Å•„ÅèÂøúÁ≠î
        else if (contextScore > 0.7) {
            const keyTopic = this.extractKeyTopic(userInput);
            baseResponse = `ÊñáËÑà„ÇíË∏è„Åæ„Åà„Å¶„ÄÅ„Äå${keyTopic}„Äç„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„Åè„ÅäÁ≠î„Åà„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆÂÅ¥Èù¢„Å´„Å§„ÅÑ„Å¶Áâπ„Å´Áü•„Çä„Åü„ÅÑ„Åß„Åó„Çá„ÅÜ„ÅãÔºü`;
        } else {
            baseResponse = await this.generateIntelligentFallback(userInput, { type: 'balanced', contextScore });
        }
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºà„Éê„É©„É≥„ÇπÂøúÁ≠îÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification && baseResponse) {
            const context = {
                category: 'balanced_response',
                contextScore: contextScore,
                politeness: this.determinePoliteness(userInput, {}),
                intensity: this.determineIntensity(userInput),
                conversationHistory: analysisResult.conversationHistory || []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async applySecondaryStrategy(response, strategy, analysisResult) {
        switch (strategy) {
            case 'template_driven':
                // „ÉÜ„É≥„Éó„É¨„Éº„ÉàË¶ÅÁ¥†ËøΩÂä†
                break;
            case 'emotion_aware':
                // ÊÑüÊÉÖËÄÉÊÖÆ„ÅÆË™øÊï¥
                const emotion = analysisResult.emotionAnalysis?.dominantEmotion;
                if (emotion === 'frustration') {
                    response = "„ÅäÂõ∞„Çä„ÅÆÁä∂Ê≥Å„ÇíÁêÜËß£„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ" + response;
                }
                break;
            case 'personalized':
                // ÂÄã‰∫∫ÁâπÂåñË™øÊï¥
                break;
        }
        
        return response;
    }
    
    /**
     * ÂøúÁ≠îÂìÅË≥™Ë©ï‰æ°
     */
    evaluateResponseQuality(analysisResult, response) {
        const metrics = {
            relevance: this.evaluateRelevance(analysisResult, response),
            coherence: this.evaluateCoherence(response),
            completeness: this.evaluateCompleteness(analysisResult, response),
            personalization: this.evaluatePersonalization(analysisResult, response),
            technicalAccuracy: this.evaluateTechnicalAccuracy(analysisResult, response)
        };
        
        // Èáç„Åø‰ªò„ÅçÁ∑èÂêà„Çπ„Ç≥„Ç¢
        const weights = { relevance: 0.3, coherence: 0.25, completeness: 0.2, personalization: 0.15, technicalAccuracy: 0.1 };
        metrics.overallScore = Object.entries(weights)
            .reduce((sum, [key, weight]) => sum + metrics[key] * weight, 0);
        
        return metrics;
    }
    
    evaluateRelevance(analysisResult, response) {
        // Èñ¢ÈÄ£ÊÄßË©ï‰æ°ÔºàÁ∞°Áï•ÁâàÔºâ
        const inputWords = new Set(analysisResult.userInput.toLowerCase().split(/\s+/));
        const responseWords = new Set(response.toLowerCase().split(/\s+/));
        const intersection = new Set([...inputWords].filter(w => responseWords.has(w)));
        
        return Math.min(intersection.size / Math.max(inputWords.size, 1), 1.0);
    }
    
    evaluateCoherence(response) {
        // ‰∏ÄË≤´ÊÄßË©ï‰æ°ÔºàÊñáÈï∑„ÉªÊßãÈÄ†„ÇíËÄÉÊÖÆÔºâ
        const sentences = response.split(/[.!?„ÄÇÔºÅÔºü]/).filter(s => s.trim().length > 0);
        const avgLength = sentences.reduce((sum, s) => sum + s.length, 0) / Math.max(sentences.length, 1);
        
        return Math.min(avgLength / 100, 1.0); // 100ÊñáÂ≠óÁ®ãÂ∫¶„ÇíÂü∫Ê∫ñ
    }
    
    evaluateCompleteness(analysisResult, response) {
        // ÂÆåÂÖ®ÊÄßË©ï‰æ°
        return response.length > 50 ? 0.8 : 0.4;
    }
    
    evaluatePersonalization(analysisResult, response) {
        return analysisResult.personalAnalysis?.adaptationStrength || 0.5;
    }
    
    evaluateTechnicalAccuracy(analysisResult, response) {
        return analysisResult.technicalAnalysis?.isTechnical ? 0.8 : 0.6;
    }
    
    /**
     * Áµ±Ë®àÊõ¥Êñ∞
     */
    updateStats(analysisResult, success) {
        if (success) {
            this.stats.successfulResponses++;
            
            if (analysisResult) {
                this.stats.averageProcessingTime = 
                    (this.stats.averageProcessingTime * (this.stats.successfulResponses - 1) + analysisResult.processingTime) / this.stats.successfulResponses;
                
                if (analysisResult.qualityMetrics) {
                    this.stats.averageQualityScore = 
                        (this.stats.averageQualityScore * (this.stats.successfulResponses - 1) + analysisResult.qualityMetrics.overallScore) / this.stats.successfulResponses;
                }
            }
        }
        
        this.stats.lastProcessingTime = Date.now();
    }
    
    /**
     * üåü ÊÑüÊÉÖ„ÉªÊó•Â∏∏‰ºöË©±ÈáçË¶ñÂøúÁ≠îÁîüÊàê„É°„ÇΩ„ÉÉ„ÉâÁæ§
     */
    
    async generateGratitudeResponse(userInput, general) {
        let baseResponse = "„ÅäÂΩπ„Å´Á´ã„Å¶„Å¶Â¨â„Åó„ÅÑ„Åß„ÅôÔºÅüòä\n\n‰ªñ„Å´„ÇÇ„ÅîË≥™Âïè„ÇÑ„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Çã„Åì„Å®„Åå„Åî„Åñ„ÅÑ„Åæ„Åó„Åü„Çâ„ÄÅ„ÅÑ„Å§„Åß„ÇÇ„ÅäÊ∞óËªΩ„Å´„ÅäÂ£∞„Åã„Åë„Åè„Å†„Åï„ÅÑ„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™„Åì„Å®„Åß„ÇÇ„Çµ„Éù„Éº„Éà„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ";
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºà„É≠„Éº„Ç´„É´„ÉªÁÑ°ÊñôËá™ÁÑ∂ÊÄßÂêë‰∏äÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'gratitude',
                politeness: this.determinePoliteness(userInput, general),
                intensity: this.determineIntensity(userInput),
                conversationHistory: general?.conversationHistory || []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generateEmotionalSupportResponse(userInput, general) {
        let baseResponse;
        if (userInput.includes('ËêΩ„Å°Ëæº') || userInput.includes('„Å§„Çâ„ÅÑ')) {
            baseResponse = "„ÅäÁñ≤„ÇåÊßò„Åß„Åô„ÄÇËêΩ„Å°Ëæº„ÇÄ„Åì„Å®„ÇÇ„ÅÇ„Çä„Åæ„Åô„Çà„Å≠„ÄÇ\n\n‰∏Ä‰∫∫„ÅßÊä±„ÅàËæº„Åæ„Åö„Å´„ÄÅ„ÅäË©±„Åó„ÅÑ„Åü„Å†„Åë„Å¶ËâØ„Åã„Å£„Åü„Åß„Åô„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™„Åì„Å®„Åß„ÅäÂõ∞„Çä„Åß„Åô„ÅãÔºüÂÖ∑‰ΩìÁöÑ„Å™Áä∂Ê≥Å„ÇíÊïô„Åà„Å¶„ÅÑ„Åü„Å†„Åë„Çå„Å∞„ÄÅ‰∏ÄÁ∑í„Å´Ëß£Ê±∫Á≠ñ„ÇíËÄÉ„Åà„Åæ„Åó„Çá„ÅÜ„ÄÇ";
        } else if (userInput.includes('Âõ∞„Å£„Å¶') || userInput.includes('‰∏çÂÆâ')) {
            baseResponse = "„ÅäÂõ∞„Çä„ÅÆÁä∂Ê≥Å„Çí„ÅäÂØü„Åó„Åó„Åæ„Åô„ÄÇ‰∏çÂÆâ„Å™Ê∞óÊåÅ„Å°„ÄÅ„Çà„ÅèÂàÜ„Åã„Çä„Åæ„Åô„ÄÇ\n\nËß£Ê±∫„Å´Âêë„Åë„Å¶‰∏ÄÁ∑í„Å´Âèñ„ÇäÁµÑ„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇÂÖ∑‰ΩìÁöÑ„Å´„Å©„ÅÆ„Çà„ÅÜ„Å™ÂïèÈ°å„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºüË©≥„Åó„ÅèÊïô„Åà„Å¶„ÅÑ„Åü„Å†„Åë„Çå„Å∞„ÄÅÈÅ©Âàá„Å™„Ç¢„Éâ„Éê„Ç§„Çπ„Çí„ÅîÊèêÊ°à„Åß„Åç„Åæ„Åô„ÄÇ";
        } else {
            baseResponse = "Â§ßÂ§â„Åù„ÅÜ„Åß„Åô„Å≠„ÄÇ„ÅäÁñ≤„ÇåÊßò„Åß„Åô„ÄÇ\n\n„Å©„ÅÆ„Çà„ÅÜ„Å™„Åì„Å®„Åß„ÅäÊÇ©„Åø„Åß„Åó„Çá„ÅÜ„ÅãÔºü„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇ‰∏ÄÁ∑í„Å´Ëß£Ê±∫Á≠ñ„ÇíËÄÉ„Åà„Åæ„Åó„Çá„ÅÜ„ÄÇ";
        }
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºà„É≠„Éº„Ç´„É´„ÉªÁÑ°ÊñôËá™ÁÑ∂ÊÄßÂêë‰∏äÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'emotional_support',
                politeness: this.determinePoliteness(userInput, general),
                intensity: this.determineIntensity(userInput),
                conversationHistory: general?.conversationHistory || []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generateGreetingResponse(userInput, general) {
        let baseResponse;
        if (userInput.includes('„Åä„ÅØ„Çà„ÅÜ')) {
            baseResponse = "„Åä„ÅØ„Çà„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ‚òÄÔ∏è\n\n‰ªäÊó•„ÇÇËâØ„ÅÑ‰∏ÄÊó•„Å´„Å™„Çä„Åæ„Åô„Çà„ÅÜ„Å´„ÄÇ‰Ωï„Åã„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Çã„Åì„Å®„Åå„ÅÇ„Çå„Å∞„ÄÅ„ÅäÊ∞óËªΩ„Å´„ÅäÂ£∞„Åã„Åë„Åè„Å†„Åï„ÅÑ„Å≠„ÄÇ";
        } else if (userInput.includes('„Åì„Çì„Å´„Å°„ÅØ') || userInput.includes('„Åì„Çì„Å´')) {
            baseResponse = "„Åì„Çì„Å´„Å°„ÅØÔºÅüòä\n\n„ÅäÁñ≤„ÇåÊßò„Åß„Åô„ÄÇ‰ªäÊó•„ÅØ„Å©„ÅÆ„Çà„ÅÜ„Å™„Åì„Å®„Åß„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Çã„Åß„Åó„Çá„ÅÜ„ÅãÔºü";
        } else if (userInput.includes('„ÅØ„Åò„ÇÅ„Åæ„Åó„Å¶')) {
            baseResponse = "„ÅØ„Åò„ÇÅ„Åæ„Åó„Å¶ÔºÅ„Åä‰ºö„ÅÑ„Åß„Åç„Å¶Â¨â„Åó„ÅÑ„Åß„Åô„ÄÇüòä\n\nÁßÅ„ÅØ„ÅÇ„Å™„Åü„ÅÆÂ≠¶Áøí„ÇÑÁõ∏Ë´á„Çí„Çµ„Éù„Éº„Éà„Åô„ÇãAI„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™„Åì„Å®„Åß„ÇÇ„ÅäÊ∞óËªΩ„Å´„ÅîÁõ∏Ë´á„Åè„Å†„Åï„ÅÑ„ÄÇ„Çà„Çç„Åó„Åè„ÅäÈ°ò„ÅÑ„Åó„Åæ„ÅôÔºÅ";
        } else {
            baseResponse = "„Åì„Çì„Å´„Å°„ÅØÔºÅ\n\n‰ªäÊó•„ÅØ„Å©„ÅÆ„Çà„ÅÜ„Å™„Åì„Å®„Åß„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Çã„Åß„Åó„Çá„ÅÜ„ÅãÔºü‰Ωï„Åß„ÇÇ„ÅäÊ∞óËªΩ„Å´„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇ";
        }
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºà„É≠„Éº„Ç´„É´„ÉªÁÑ°ÊñôËá™ÁÑ∂ÊÄßÂêë‰∏äÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'greeting',
                politeness: this.determinePoliteness(userInput, general),
                intensity: this.determineIntensity(userInput),
                conversationHistory: general?.conversationHistory || []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generateLearningSupportResponse(userInput, general) {
        let baseResponse;
        if (userInput.includes('ÂàùÂøÉËÄÖ') || userInput.includes('Âßã„ÇÅ')) {
            baseResponse = "Â≠¶Áøí„ÇíÂßã„ÇÅ„Çâ„Çå„Çã„ÅÆ„Åß„Åô„Å≠ÔºÅÁ¥†Êô¥„Çâ„Åó„ÅÑ„Åß„ÅôÔºÅüåü\n\nÂàùÂøÉËÄÖ„ÅÆÊñπ„Å´„ÅØ„ÄÅÂü∫Êú¨„Åã„Çâ‰∏ÄÊ≠©„Åö„Å§Á¢∫ÂÆü„Å´ÈÄ≤„ÇÄ„Åì„Å®„Çí„Åä„Åô„Åô„ÇÅ„Åó„Åæ„Åô„ÄÇ„ÅÇ„Å™„Åü„ÅÆ„Éö„Éº„Çπ„Å´Âêà„Çè„Åõ„Å¶„ÄÅÂàÜ„Åã„Çä„ÇÑ„Åô„Åè„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ\n\n„Å©„ÅÆÂàÜÈáé„ÅÆÂ≠¶Áøí„Çí„ÅäËÄÉ„Åà„Åß„Åô„ÅãÔºüÂÖ∑‰ΩìÁöÑ„Å™ÁõÆÊ®ô„Åå„ÅÇ„Çå„Å∞Êïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
        } else if (userInput.includes('ÂãâÂº∑ÊñπÊ≥ï') || userInput.includes('Â≠¶ÁøíÊñπÊ≥ï')) {
            baseResponse = "ÂäπÊûúÁöÑ„Å™Â≠¶ÁøíÊñπÊ≥ï„Å´„Å§„ÅÑ„Å¶„ÅäÁ≠î„Åà„Åó„Åæ„ÅôÔºÅüìö\n\n‰∏Ä‰∫∫„Å≤„Å®„Çä„Å´ÊúÄÈÅ©„Å™Â≠¶Áøí„Çπ„Çø„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åô„ÅÆ„Åß„ÄÅ„ÅÇ„Å™„Åü„Å´Âêà„Å£„ÅüÊñπÊ≥ï„Çí‰∏ÄÁ∑í„Å´Ë¶ã„Å§„Åë„Åæ„Åó„Çá„ÅÜ„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™ÂàÜÈáé„ÇíÂ≠¶Áøí„Åï„Çå„Åü„ÅÑ„ÅÆ„Åã„ÄÅÁèæÂú®„ÅÆ„É¨„Éô„É´„ÇÑÁõÆÊ®ô„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
        } else {
            baseResponse = "Â≠¶Áøí„Å´„Å§„ÅÑ„Å¶„ÅÆ„ÅîË≥™Âïè„Åß„Åô„Å≠ÔºÅüìù\n\n„ÅÇ„Å™„Åü„ÅÆÁõÆÊ®ôÈÅîÊàê„Çí„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆÂàÜÈáé„Å´„Å§„ÅÑ„Å¶Â≠¶„Å≥„Åü„ÅÑ„Åã„ÄÅ„Å©„ÅÆ„Çà„ÅÜ„Å™„Åì„Å®„ÅßÂõ∞„Å£„Å¶„ÅÑ„Çã„Åã„ÇíË©≥„Åó„ÅèÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
        }
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºà„É≠„Éº„Ç´„É´„ÉªÁÑ°ÊñôËá™ÁÑ∂ÊÄßÂêë‰∏äÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'learning_support',
                politeness: this.determinePoliteness(userInput, general),
                intensity: this.determineIntensity(userInput),
                conversationHistory: general?.conversationHistory || []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generateTechnicalInquiryResponse(userInput, general) {
        let baseResponse;
        if (userInput.includes('ÂàùÂøÉËÄÖ') && userInput.includes('„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞')) {
            baseResponse = "„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Â≠¶Áøí„ÇíÂßã„ÇÅ„Çâ„Çå„Çã„ÅÆ„Åß„Åô„Å≠ÔºÅÁ¥†Êô¥„Çâ„Åó„ÅÑ„Åß„ÅôÔºÅüíª\n\nÂàùÂøÉËÄÖ„ÅÆÊñπ„Å´„ÅØ„ÄÅ„Åæ„ÅöÂü∫Êú¨ÁöÑ„Å™Ê¶ÇÂøµ„Åã„ÇâÂßã„ÇÅ„Çã„Åì„Å®„Çí„Åä„Åô„Åô„ÇÅ„Åó„Åæ„Åô„ÄÇ„ÅÇ„Å™„Åü„ÅÆËààÂë≥„ÇÑÁõÆÊ®ô„Å´Âêà„Çè„Åõ„Å¶„ÄÅÊúÄÈÅ©„Å™Â≠¶Áøí„Éë„Çπ„Çí„ÅîÊèêÊ°à„Åß„Åç„Åæ„Åô„ÄÇ\n\n„Å©„ÅÆ„Çà„ÅÜ„Å™ÂàÜÈáé„Å´ËààÂë≥„Åå„ÅÇ„Çä„Åæ„Åô„ÅãÔºüWeb„Çµ„Ç§„Éà‰ΩúÊàê„ÄÅ„Ç¢„Éó„É™ÈñãÁô∫„ÄÅ„Éá„Éº„ÇøÂàÜÊûê„Å™„Å©„ÄÅÁõÆÊåá„Åó„Åü„ÅÑÊñπÂêë„Åå„ÅÇ„Çå„Å∞Êïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
        } else {
            baseResponse = "ÊäÄË°ìÁöÑ„Å™„ÅîË≥™Âïè„Åß„Åô„Å≠ÔºÅüîß\n\n„ÅÇ„Å™„Åü„ÅÆ„É¨„Éô„É´„ÇÑÁõÆÁöÑ„Å´Âêà„Çè„Åõ„Å¶„ÄÅÂàÜ„Åã„Çä„ÇÑ„Åô„ÅèË™¨Êòé„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇÂÖ∑‰ΩìÁöÑ„Å´„Å©„ÅÆ„Çà„ÅÜ„Å™ÊäÄË°ì„ÇÑË™≤È°å„Å´„Å§„ÅÑ„Å¶„ÅäËÅû„Åç„Åó„Åü„ÅÑ„Åß„Åó„Çá„ÅÜ„ÅãÔºü";
        }
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºàÊäÄË°ìÂàÜÈáéÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'technical_inquiry',
                politeness: this.determinePoliteness(userInput, general),
                intensity: this.determineIntensity(userInput),
                conversationHistory: general?.conversationHistory || []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generateGeneralConversationResponse(userInput, general) {
        let baseResponse = `„Äå${this.extractKeyTopic(userInput)}„Äç„Å´„Å§„ÅÑ„Å¶„ÅäË©±„Åó„Åó„Åæ„Åó„Çá„ÅÜÔºÅ\n\n‰Ωï„Åß„ÇÇ„ÅäÊ∞óËªΩ„Å´„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇ„ÅÇ„Å™„Åü„ÅÆ„ÅäÂΩπ„Å´Á´ã„Å¶„Çã„Çà„ÅÜ„ÄÅ„Åß„Åç„ÇãÈôê„Çä„Çµ„Éù„Éº„Éà„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™ÁÇπ„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèÁü•„Çä„Åü„ÅÑ„Åß„Åó„Çá„ÅÜ„ÅãÔºü`;
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºà‰∏ÄËà¨‰ºöË©±ÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'general_conversation',
                politeness: this.determinePoliteness(userInput, general),
                intensity: this.determineIntensity(userInput),
                conversationHistory: general?.conversationHistory || []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    /**
     * ‰∏ÅÂØßÂ∫¶Âà§ÂÆö
     */
    determinePoliteness(userInput, general) {
        // Ê∑±„ÅÑÊÑüË¨ùË°®Áèæ
        if (userInput.includes('ÂøÉ„Çà„Çä') || userInput.includes('Ê∑±„Åè') || userInput.includes('Êú¨ÂΩì„Å´')) {
            return 'formal';
        }
        
        // „Ç´„Ç∏„É•„Ç¢„É´„Å™Ë°®Áèæ
        if (/ÔºÅ|!|üòä|üòÑ|„Åô„Åî„Åè|„ÇÅ„Å£„Å°„ÇÉ/.test(userInput)) {
            return 'casual';
        }
        
        return 'standard';
    }
    
    /**
     * ÊÑüÊÉÖÂº∑Â∫¶Âà§ÂÆö
     */
    determineIntensity(userInput) {
        // È´òÂº∑Â∫¶Ë°®Áèæ
        if (userInput.includes('„Å®„Å¶„ÇÇ') || userInput.includes('„Åô„Åî„Åè') || userInput.includes('Êú¨ÂΩì„Å´')) {
            return 'high';
        }
        
        // ‰ΩéÂº∑Â∫¶Ë°®Áèæ
        if (userInput.includes('„Å°„Çá„Å£„Å®') || userInput.includes('Â∞ë„Åó') || userInput.includes('„Åæ„ÅÇ')) {
            return 'low';
        }
        
        return 'medium';
    }

    /**
     * üîß Êó¢Â≠òÊäÄË°ìÁ≥ª„Ç´„ÉÜ„Ç¥„É™Âà•ÂøúÁ≠îÁîüÊàê„É°„ÇΩ„ÉÉ„ÉâÁæ§ÔºàÂæåÊñπ‰∫íÊèõÊÄßÔºâ
     */
    async generateDataScienceResponse(userInput, technical) {
        let baseResponse;
        if (userInput.includes('ÊØîËºÉ') || userInput.includes('ÈÅï„ÅÑ')) {
            const tools = this.extractComparisonTargets(userInput);
            baseResponse = `„Éá„Éº„Çø„Çµ„Ç§„Ç®„É≥„ÇπÂàÜÈáé„Åß„ÅÆ${tools}„ÅÆÊØîËºÉ„Å´„Å§„ÅÑ„Å¶„ÅäÁ≠î„Åà„Åó„Åæ„Åô„ÄÇ\n\nÁî®ÈÄî„ÄÅÊÄßËÉΩ„ÄÅÂ≠¶Áøí„Ç≥„Çπ„Éà„ÄÅ„Ç®„Ç≥„Ç∑„Çπ„ÉÜ„É†„ÅÆË¶≥ÁÇπ„Åã„ÇâË©≥„Åó„ÅèÊØîËºÉ„Åó„Å¶„ÄÅ„ÅÇ„Å™„Åü„ÅÆÁõÆÁöÑ„Å´ÊúÄÈÅ©„Å™ÈÅ∏ÊäûËÇ¢„Çí„ÅîÊèêÊ°à„Åó„Åæ„Åô„ÄÇÂÖ∑‰ΩìÁöÑ„Å´„Å©„ÅÆË¶≥ÁÇπ„ÇíÈáçË¶ñ„Åï„Çå„Åæ„Åô„ÅãÔºü`;
        } else {
            baseResponse = `„Éá„Éº„Çø„Çµ„Ç§„Ç®„É≥„ÇπÔºà${technical.category}Ôºâ„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇÂÖ∑‰ΩìÁöÑ„Å™ÊâãÊ≥ï„ÄÅ„ÉÑ„Éº„É´„ÅÆÈÅ∏Êäû„ÄÅÂÆüË£ÖÊñπÊ≥ï„Å´„Å§„ÅÑ„Å¶„ÄÅ„ÅÇ„Å™„Åü„ÅÆÁõÆÁöÑ„Å´Âêà„Çè„Åõ„Å¶„ÅîË™¨Êòé„Åó„Åæ„Åô„ÄÇ`;
        }
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºà„Éá„Éº„Çø„Çµ„Ç§„Ç®„É≥„ÇπÊäÄË°ìÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'data_science_technical',
                technicalCategory: technical.category,
                politeness: this.determinePoliteness(userInput, {}),
                intensity: this.determineIntensity(userInput),
                conversationHistory: []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generateReactResponse(userInput, technical) {
        let baseResponse;
        if (userInput.includes('useState') || userInput.includes('hook')) {
            baseResponse = `React„ÅÆ„Éï„ÉÉ„ÇØÔºàuseStateÁ≠âÔºâ„Å´„Å§„ÅÑ„Å¶„ÄÅ‰Ωø„ÅÑÊñπ„Åã„ÇâÂÆüË∑µÁöÑ„Å™ÂøúÁî®‰æã„Åæ„ÅßË©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇ\n\n„Ç≥„Éº„Éâ‰æã„Çí‰∫§„Åà„Å¶„ÄÅÁä∂ÊÖãÁÆ°ÁêÜ„ÅÆ„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ„Å®Ê≥®ÊÑèÁÇπ„Çí„ÅîË™¨Êòé„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™Ê©üËÉΩ„ÇíÂÆüË£Ö„Åï„Çå„Åü„ÅÑ„Åß„Åô„ÅãÔºü`;
        } else {
            baseResponse = `React/JavaScriptÔºà${technical.category}Ôºâ„Å´„Å§„ÅÑ„Å¶„ÄÅÂÆüË∑µÁöÑ„Å™„Ç≥„Éº„Éâ‰æã„Å®ÂÖ±„Å´Ë©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™Ê©üËÉΩ„ÇÑÊ¶ÇÂøµ„Å´„Å§„ÅÑ„Å¶Áü•„Çä„Åü„ÅÑ„Åß„Åó„Çá„ÅÜ„ÅãÔºü`;
        }
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºàReactÊäÄË°ìÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'react_technical',
                technicalCategory: technical.category,
                politeness: this.determinePoliteness(userInput, {}),
                intensity: this.determineIntensity(userInput),
                conversationHistory: []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generateHowToResponse(userInput, technical) {
        const action = this.extractActionFromHowTo(userInput);
        let baseResponse = `„Äå${action}„Äç„ÅÆÊñπÊ≥ï„Å´„Å§„ÅÑ„Å¶„ÄÅ„Çπ„ÉÜ„ÉÉ„Éó„Éê„Ç§„Çπ„ÉÜ„ÉÉ„Éó„ÅßË©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇ\n\nÂâçÊèêÊù°‰ª∂„ÄÅÂøÖË¶Å„Å™„ÉÑ„Éº„É´„ÄÅÂÖ∑‰ΩìÁöÑ„Å™ÊâãÈ†Ü„ÄÅÊ≥®ÊÑèÁÇπ„Å®„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞„Åæ„ÅßÂåÖÊã¨ÁöÑ„Å´„ÅîË™¨Êòé„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆÈÉ®ÂàÜ„Åã„ÇâÂßã„ÇÅ„Åü„ÅÑ„Åß„Åó„Çá„ÅÜ„ÅãÔºü`;
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºàHow-toÊäÄË°ìÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'howto_technical',
                action: action,
                politeness: this.determinePoliteness(userInput, {}),
                intensity: this.determineIntensity(userInput),
                conversationHistory: []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generateComparisonResponse(userInput, technical) {
        const targets = this.extractComparisonTargets(userInput);
        let baseResponse = `${targets}„ÅÆÊØîËºÉ„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèÂàÜÊûê„Åó„Åæ„Åô„ÄÇ\n\nÊÄßËÉΩ„ÄÅ‰Ωø„ÅÑ„ÇÑ„Åô„Åï„ÄÅÂ≠¶Áøí„Ç≥„Çπ„Éà„ÄÅÈÅ©Áî®Â†¥Èù¢„ÅÆË¶≥ÁÇπ„Åã„ÇâÊØîËºÉ„Åó„ÄÅ„ÅÇ„Å™„Åü„ÅÆË¶Å‰ª∂„Å´ÊúÄÈÅ©„Å™ÈÅ∏ÊäûËÇ¢„Çí„ÅîÊèêÊ°à„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆË¶≥ÁÇπ„ÇíÁâπ„Å´ÈáçË¶ñ„Åï„Çå„Åæ„Åô„ÅãÔºü`;
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºàÊØîËºÉÊäÄË°ìÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'comparison_technical',
                targets: targets,
                politeness: this.determinePoliteness(userInput, {}),
                intensity: this.determineIntensity(userInput),
                conversationHistory: []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generateDebuggingResponse(userInput, technical) {
        let baseResponse = `„Éá„Éê„ÉÉ„Ç∞„ÉªÂïèÈ°åËß£Ê±∫„Å´„Å§„ÅÑ„Å¶„ÄÅ„Ç∑„Çπ„ÉÜ„Éû„ÉÜ„Ç£„ÉÉ„ÇØ„Å™„Ç¢„Éó„É≠„Éº„ÉÅ„Çí„ÅîÊèêÊ°à„Åó„Åæ„Åô„ÄÇ\n\nÂïèÈ°å„ÅÆÁâπÂÆö„ÄÅÂéüÂõ†ÂàÜÊûê„ÄÅËß£Ê±∫Á≠ñ„ÅÆÊ§úË®é„ÄÅ‰∫àÈò≤ÊñπÊ≥ï„Åæ„Åß„ÄÅÂÆüË∑µÁöÑ„Å™ÊâãÈ†Ü„Çí„ÅîË™¨Êòé„Åó„Åæ„Åô„ÄÇÂÖ∑‰ΩìÁöÑ„Å´„Å©„ÅÆ„Çà„ÅÜ„Å™ÂïèÈ°å„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü`;
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºà„Éá„Éê„ÉÉ„Ç∞ÊäÄË°ìÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'debugging_technical',
                politeness: this.determinePoliteness(userInput, {}),
                intensity: this.determineIntensity(userInput),
                conversationHistory: []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    async generateGenericTechnicalResponse(userInput, technical) {
        const topic = this.extractKeyTopic(userInput);
        let baseResponse = `„Äå${topic}„ÄçÔºàÊäÄË°ìÂàÜÈáé: ${technical.category}Ôºâ„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇ\n\nÂü∫Êú¨Ê¶ÇÂøµ„Åã„ÇâÂÆüË∑µÁöÑ„Å™ÂøúÁî®„Åæ„Åß„ÄÅ„ÅÇ„Å™„Åü„ÅÆ„É¨„Éô„É´„Å®ÁõÆÁöÑ„Å´Âêà„Çè„Åõ„Å¶Ë™¨Êòé„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆÂÅ¥Èù¢„Å´„Å§„ÅÑ„Å¶Áâπ„Å´Áü•„Çä„Åü„ÅÑ„Åß„Åó„Çá„ÅÜ„ÅãÔºü`;
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºàÊ±éÁî®ÊäÄË°ìÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification) {
            const context = {
                category: 'generic_technical',
                topic: topic,
                technicalCategory: technical.category,
                politeness: this.determinePoliteness(userInput, {}),
                intensity: this.determineIntensity(userInput),
                conversationHistory: []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
        }
        
        return baseResponse;
    }
    
    /**
     * „Ç§„É≥„ÉÜ„É™„Ç∏„Çß„É≥„Éà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁîüÊàê
     */
    async generateIntelligentFallback(userInput, context) {
        let baseResponse;
        
        // Ë≥™Âïè„Çø„Ç§„Éó„ÅÆÊé®ÂÆö
        if (userInput.includes('„Å©„ÅÜ') || userInput.includes('ÊñπÊ≥ï') || userInput.includes('„ÇÑ„ÇäÊñπ')) {
            const topic = this.extractKeyTopic(userInput);
            baseResponse = `„Äå${topic}„Äç„ÅÆÊñπÊ≥ï„Å´„Å§„ÅÑ„Å¶„ÅäÁ≠î„Åà„Åó„Åæ„Åô„ÄÇ„Çà„ÇäÂÖ∑‰ΩìÁöÑ„Å™Áä∂Ê≥Å„ÇÑÁõÆÁöÑ„ÇíÊïô„Åà„Å¶„ÅÑ„Åü„Å†„Åë„Çå„Å∞„ÄÅË©≥Á¥∞„Å™„Ç¢„Éâ„Éê„Ç§„Çπ„Çí„ÅîÊèê‰æõ„Åß„Åç„Åæ„Åô„ÄÇ`;
        }
        else if (userInput.includes('ÊØîËºÉ') || userInput.includes('ÈÅï„ÅÑ')) {
            const targets = this.extractComparisonTargets(userInput);
            baseResponse = `${targets}„ÅÆÊØîËºÉ„Å´„Å§„ÅÑ„Å¶„ÅäÁ≠î„Åà„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆË¶≥ÁÇπ„Åß„ÅÆÊØîËºÉ„Çí„ÅäÊ±Ç„ÇÅ„Åß„Åó„Çá„ÅÜ„ÅãÔºüÊÄßËÉΩ„ÄÅ‰Ωø„ÅÑ„ÇÑ„Åô„Åï„ÄÅÂ≠¶Áøí„Ç≥„Çπ„ÉàÁ≠â„ÄÅ„ÅîÂ∏åÊúõ„Çí„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇ`;
        }
        else if (userInput.includes('„Å®„ÅØ') || userInput.includes('„Å´„Å§„ÅÑ„Å¶')) {
            const topic = this.extractKeyTopic(userInput);
            baseResponse = `„Äå${topic}„Äç„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇÂü∫Êú¨Ê¶ÇÂøµ„Åã„ÇâÂÆüË∑µÁöÑ„Å™ÂøúÁî®„Åæ„Åß„ÄÅ„Å©„ÅÆÂÅ¥Èù¢„Å´„Å§„ÅÑ„Å¶Áâπ„Å´Áü•„Çä„Åü„ÅÑ„Åß„Åó„Çá„ÅÜ„ÅãÔºü`;
        }
        else {
            // „Éá„Éï„Ç©„É´„ÉàÔºàÂ§ßÂπÖÊîπÂñÑÔºâ
            const topic = this.extractKeyTopic(userInput);
            baseResponse = `„Äå${topic}„Äç„Å´„Å§„ÅÑ„Å¶„ÅäÁ≠î„Åà„Åó„Åæ„Åô„ÄÇ„Çà„ÇäË©≥„Åó„ÅÑÂõûÁ≠î„ÅÆ„Åü„ÇÅ„Å´„ÄÅÂÖ∑‰ΩìÁöÑ„Å™Áä∂Ê≥Å„ÇÑÁõÆÁöÑ„Çí„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇÊäÄË°ìÁöÑ„Å™Ë™≤È°åËß£Ê±∫„Çí„Çµ„Éù„Éº„Éà„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ`;
        }
        
        // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂøúÁ≠îÂØæÂøúÔºâ
        if (this.config.enableVocabularyDiversification && baseResponse) {
            const diversificationContext = {
                category: 'fallback_response',
                fallbackType: context?.type || 'general',
                politeness: this.determinePoliteness(userInput, {}),
                intensity: this.determineIntensity(userInput),
                conversationHistory: context?.conversationHistory || []
            };
            baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, diversificationContext);
        }
        
        return baseResponse;
    }
    
    /**
     * üß† ËªΩÈáè„Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØÂàÜÈ°û„ÉªÊÑüÊÉÖË™ûËæûÊõ∏
     */
    
    getEmotionDictionary() {
        return {
            positive: ['„ÅÇ„Çä„Åå„Å®„ÅÜ', '„ÅÜ„Çå„Åó„ÅÑ', 'ÊÑüË¨ù', 'Âä©„Åã„Çä', 'ËâØ„ÅÑ', '„Çà„Åã„Å£„Åü', 'Â¨â„Åó„ÅÑ', 'Ê∫ÄË∂≥', 'Á¥†Êô¥„Çâ„Åó„ÅÑ'],
            negative: ['Âõ∞„Å£„Å¶', 'ËêΩ„Å°Ëæº', '„Å§„Çâ„ÅÑ', '‰∏çÂÆâ', '„Çè„Åã„Çâ„Å™„ÅÑ', 'Áñ≤„Çå', 'ÊÇ©„Åø', 'ÂøÉÈÖç', '„Å†„ÇÅ'],
            greeting: ['„Åä„ÅØ„Çà„ÅÜ', '„Åì„Çì„Å´', '„ÅØ„Åò„ÇÅ„Åæ„Åó„Å¶', '„ÅäÁñ≤„Çå', '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ', 'ÊúÄËøë„Å©„ÅÜ', 'ÂÖÉÊ∞ó', 'Ë™øÂ≠ê', '„Å©„ÅÜ„Åß„Åô„Åã'],
            learning: ['Êïô„Åà„Å¶', 'Â≠¶Áøí', 'ÂãâÂº∑', 'Ë¶ö„Åà', '„Çè„Åã„Çä„ÇÑ„Åô„Åè', 'Áü•„Çä„Åü„ÅÑ', 'ÁêÜËß£', 'ÁøíÂæó'],
            support: ['Êâã‰ºù„Å£„Å¶', '„Çµ„Éù„Éº„Éà', 'ÊîØÊè¥', 'Áõ∏Ë´á', '„Ç¢„Éâ„Éê„Ç§„Çπ', 'Ëß£Ê±∫'],
            technical: ['„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞', 'Python', 'JavaScript', 'React', '„Éá„Éº„Çø„Çµ„Ç§„Ç®„É≥„Çπ', '„Ç≥„Éº„Éâ', 'ÈñãÁô∫']
        };
    }
    
    calculateEmotionScore(userInput) {
        const dictionary = this.getEmotionDictionary();
        const scores = {};
        
        for (const [emotion, words] of Object.entries(dictionary)) {
            scores[emotion] = words.reduce((score, word) => {
                return score + (userInput.includes(word) ? 1 : 0);
            }, 0);
        }
        
        return scores;
    }
    
    detectDominantEmotion(userInput) {
        const scores = this.calculateEmotionScore(userInput);
        const maxScore = Math.max(...Object.values(scores));
        
        if (maxScore === 0) return 'neutral';
        
        const dominantEmotion = Object.keys(scores).find(emotion => scores[emotion] === maxScore);
        return { emotion: dominantEmotion, score: maxScore, allScores: scores };
    }
    
    calculateIntentSimilarity(userInput, knownPatterns) {
        // Á∞°Âçò„Å™„Ç≥„Çµ„Ç§„É≥È°û‰ººÂ∫¶„ÅÆ‰ª£ÊõøÔºö„Ç≠„Éº„ÉØ„Éº„ÉâÈáçË§á„Çπ„Ç≥„Ç¢
        const inputWords = userInput.toLowerCase().split(/\s+/);
        const similarities = {};
        
        const patterns = {
            daily_conversation: ['„Åä„ÅØ„Çà„ÅÜ', '„Åì„Çì„Å´', 'ÂÖÉÊ∞ó', '‰ªäÊó•', 'Êò®Êó•', 'ÊòéÊó•', 'ÊúÄËøë„Å©„ÅÜ', 'Ë™øÂ≠ê', '„Å©„ÅÜ„Åß„Åô„Åã'],
            emotional_support: ['Âõ∞„Å£„Å¶', '‰∏çÂÆâ', 'ËêΩ„Å°Ëæº', '„Å§„Çâ„ÅÑ', 'ÊÇ©„Åø', 'ÂøÉÈÖç'],
            learning_request: ['Êïô„Åà„Å¶', 'Â≠¶Áøí', 'ÂãâÂº∑', 'Ë¶ö„Åà', 'Áü•„Çä„Åü„ÅÑ', 'ÊñπÊ≥ï'],
            technical_inquiry: ['„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞', '„Ç≥„Éº„Éâ', 'ÈñãÁô∫', 'Python', 'JavaScript'],
            gratitude: ['„ÅÇ„Çä„Åå„Å®„ÅÜ', 'ÊÑüË¨ù', 'Âä©„Åã„Çä', '„Çà„Åã„Å£„Åü'],
            general_question: ['‰Ωï', '„Å©„ÅÜ', '„Å©„ÅÆ', '„ÅÑ„Å§', '„Å©„Åì', '„Å™„Åú']
        };
        
        for (const [intent, keywords] of Object.entries(patterns)) {
            const overlap = inputWords.filter(word => 
                keywords.some(keyword => word.includes(keyword) || keyword.includes(word))
            );
            similarities[intent] = overlap.length / Math.max(inputWords.length, keywords.length);
        }
        
        return similarities;
    }
    
    selectFlexibleStrategy(userInput) {
        const emotionResult = this.detectDominantEmotion(userInput);
        const intentSimilarities = this.calculateIntentSimilarity(userInput);
        
        // ÊÑüÊÉÖ„ÅåÂº∑„ÅÑÂ†¥Âêà„ÅØÊÑüÊÉÖÂÑ™ÂÖà
        if (emotionResult.score > 1) {
            if (emotionResult.emotion === 'positive') return 'gratitude_focused';
            if (emotionResult.emotion === 'negative') return 'emotional_support';
            if (emotionResult.emotion === 'greeting') return 'greeting_focused';
        }
        
        // ÊÑèÂõ≥„Éô„Éº„Çπ„ÅÆÈÅ∏Êäû
        const topIntent = Object.entries(intentSimilarities)
            .sort(([,a], [,b]) => b - a)[0];
        
        if (topIntent[1] > 0.2) {
            return topIntent[0];
        }
        
        return 'general_conversation';
    }

    /**
     * „Éò„É´„Éë„Éº„É°„ÇΩ„ÉÉ„ÉâÁæ§
     */
    extractKeyTopic(input) {
        // ÊäÄË°ìÁî®Ë™û„ÅÆÊäΩÂá∫
        const techTerms = ['Python', 'JavaScript', 'React', '„Éá„Éº„Çø„Çµ„Ç§„Ç®„É≥„Çπ', 'SQL', 'TensorFlow', 'PyTorch', 'AI', 'Machine Learning'];
        for (const term of techTerms) {
            if (input.toLowerCase().includes(term.toLowerCase())) {
                return term;
            }
        }
        
        // ‰∏ÄËà¨ÁöÑ„Å™„Ç≠„Éº„ÉØ„Éº„ÉâÊäΩÂá∫
        const words = input.split(/[„ÄÇ„ÄÅ\s]+/);
        const meaningfulWords = words.filter(word => word.length > 2 && !['„Å´„Å§„ÅÑ„Å¶', '„ÇíÊïô„Åà„Å¶', '„Åè„Å†„Åï„ÅÑ', '„Åß„Åô', '„Åæ„Åô'].includes(word));
        return meaningfulWords[0] || 'Ë©≤ÂΩìÂàÜÈáé';
    }
    
    extractComparisonTargets(input) {
        const patterns = [
            /(.+?)„Å®(.+?)„ÅÆ?ÊØîËºÉ/,
            /(.+?)„Å®(.+?)„ÅÆ?ÈÅï„ÅÑ/,
            /(.+?)vs\.?(.+)/i
        ];
        
        for (const pattern of patterns) {
            const match = input.match(pattern);
            if (match) {
                return `${match[1].trim()}„Å®${match[2].trim()}`;
            }
        }
        
        return '„ÉÑ„Éº„É´„ÉªÊäÄË°ì';
    }
    
    extractActionFromHowTo(input) {
        const actionPattern = /(.+?)(„ÅÆ?ÊñπÊ≥ï|„ÇÑ„ÇäÊñπ|„Å©„ÅÜ)/;
        const match = input.match(actionPattern);
        return match ? match[1].trim() : 'ÂÆüË£Ö„ÉªË®≠ÂÆö';
    }

    /**
     * Â≠¶Áøí„Éá„Éº„ÇøÂº∑ÂåñÂøúÁ≠îÁîüÊàê
     */
    async generateLearningEnhancedResponse(userInput, general, learningAnalysis) {
        try {
            // Â≠¶Áøí„Éá„Éº„Çø„Åã„ÇâÈñ¢ÈÄ£ÊÉÖÂ†±„ÇíÊäΩÂá∫
            const relatedConcepts = this.extractRelatedConcepts(userInput, learningAnalysis.userRelations);
            const conversationContext = this.extractConversationContext(learningAnalysis.pastConversations);
            const personalPreferences = this.extractPersonalPreferences(learningAnalysis);

            // Â≠¶Áøí„Éá„Éº„Çø„Å´Âü∫„Å•„ÅèÂÄã‰∫∫Âåñ„Åï„Çå„Åü„Éô„Éº„ÇπÂøúÁ≠î„ÇíÁîüÊàê
            let baseResponse = await this.generatePersonalizedBaseResponse(
                userInput, 
                general, 
                relatedConcepts, 
                conversationContext, 
                personalPreferences
            );

            if (!baseResponse) {
                return null; // Â≠¶Áøí„Éá„Éº„Çø„ÅåÂøúÁ≠îÁîüÊàê„Å´ÈÅ©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà
            }

            // Ë™ûÂΩôÂ§öÊßòÂåñÂá¶ÁêÜÔºàÂ≠¶Áøí„Éá„Éº„ÇøËÄÉÊÖÆÔºâ
            if (this.config.enableVocabularyDiversification) {
                const context = {
                    category: general?.category || 'learning_enhanced',
                    politeness: this.determinePoliteness(userInput, general),
                    intensity: this.determineIntensity(userInput),
                    conversationHistory: learningAnalysis.pastConversations || [],
                    personalPreferences: personalPreferences,
                    relatedConcepts: relatedConcepts
                };
                baseResponse = await this.vocabularyDiversifier.diversifyResponse(baseResponse, context);
            }

            return baseResponse;
        } catch (error) {
            console.warn('Â≠¶ÁøíÂº∑ÂåñÂøúÁ≠îÁîüÊàê„Ç®„É©„Éº:', error.message);
            return null;
        }
    }

    extractRelatedConcepts(userInput, userRelations) {
        const inputWords = userInput.toLowerCase().split(/\s+/);
        const relatedConcepts = [];

        for (const relation of userRelations || []) {
            for (const word of inputWords) {
                if (relation.concept1?.toLowerCase().includes(word) || relation.concept2?.toLowerCase().includes(word)) {
                    relatedConcepts.push({
                        concept1: relation.concept1,
                        concept2: relation.concept2,
                        strength: relation.strength || 1,
                        context: relation.context
                    });
                }
            }
        }

        return relatedConcepts.slice(0, 3); // ÊúÄÂ§ß3„Å§„Åæ„Åß
    }

    extractConversationContext(pastConversations) {
        if (!pastConversations || pastConversations.length === 0) {
            return { themes: [], patterns: [], recentTopics: [] };
        }

        const recentTopics = pastConversations.slice(-3).map(conv => conv.topic || conv.userMessage?.substring(0, 50));
        const themes = [...new Set(pastConversations.map(conv => conv.category || 'general'))];
        
        return {
            themes: themes.slice(0, 3),
            patterns: [],
            recentTopics: recentTopics.filter(Boolean)
        };
    }

    extractPersonalPreferences(learningAnalysis) {
        return {
            adaptationStrength: learningAnalysis.adaptationStrength || 0,
            preferredTopics: [],
            communicationStyle: 'friendly', // „Éá„Éï„Ç©„É´„ÉàÂÄ§
            detailLevel: 'medium'
        };
    }

    async generatePersonalizedBaseResponse(userInput, general, relatedConcepts, conversationContext, personalPreferences) {
        // Èñ¢ÈÄ£Ê¶ÇÂøµ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆÂÄã‰∫∫ÂåñÂøúÁ≠î
        if (relatedConcepts.length > 0) {
            const mainConcept = relatedConcepts[0];
            const personalizedResponse = `„Äå${userInput}„Äç„Å´„Å§„ÅÑ„Å¶„Åß„Åô„Å≠„ÄÇ`;
            
            if (mainConcept.concept1 && mainConcept.concept2) {
                return personalizedResponse + `‰ª•Ââç„ÅäË©±„Åó„Åó„Åü„Äå${mainConcept.concept1}„Äç„Å®„Äå${mainConcept.concept2}„Äç„ÅÆÈñ¢ÈÄ£ÊÄß„ÇíË∏è„Åæ„Åà„Å¶„ÄÅ„Åï„Çâ„Å´Ë©≥„Åó„Åè„ÅäË©±„Åó„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ

${this.generateContextualResponse(userInput, mainConcept, general)}`;
            }
        }

        // ÈÅéÂéª„ÅÆ‰ºöË©±Â±•Ê≠¥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆÁ∂ôÁ∂öÊÄßÂøúÁ≠î
        if (conversationContext.recentTopics.length > 0) {
            const recentTopic = conversationContext.recentTopics[0];
            return `„Äå${userInput}„Äç„Å´„Å§„ÅÑ„Å¶„Åß„Åô„Å≠„ÄÇ‰ª•Ââç„ÅÆ„Äå${recentTopic}„Äç„Å´Èñ¢„Åô„Çã„ÅäË©±„ÇÇË∏è„Åæ„Åà„Å¶„ÄÅ„ÅäÁ≠î„Åà„Åó„Åæ„Åô„Å≠„ÄÇ

${this.generateContinuityResponse(userInput, recentTopic, general)}`;
        }

        return null; // Â≠¶Áøí„Éá„Éº„Çø„ÅåÊ¥ªÁî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà
    }

    generateContextualResponse(userInput, concept, general) {
        const category = general?.category || 'general';
        
        switch (category) {
            case 'technical_inquiry':
                return `„Äå${concept.concept1}„Äç„Å®„Äå${concept.concept2}„Äç„ÅÆÈñ¢‰øÇÊÄß„Åã„ÇâËÄÉ„Åà„Çã„Å®„ÄÅ„Åì„ÅÆÊäÄË°ìÁöÑ„Å™Ë™≤È°å„Å´„ÅØ„ÅÑ„Åè„Å§„Åã„ÅÆ„Ç¢„Éó„É≠„Éº„ÉÅ„ÅåËÄÉ„Åà„Çâ„Çå„Åæ„Åô„ÄÇ„ÅÇ„Å™„Åü„ÅÆÈÅéÂéª„ÅÆÂ≠¶Áøí„Éë„Çø„Éº„É≥„ÇíËÄÉÊÖÆ„Åó„Å¶„ÄÅÊúÄÈÅ©„Å™Ëß£Ê±∫ÊñπÊ≥ï„Çí„ÅîÊèêÊ°à„Åó„Åæ„Åô„ÄÇ`;
            case 'learning_support':
                return `„Åì„Çå„Åæ„Åß„ÅÆÂ≠¶ÁøíÂÜÖÂÆπ„ÇíÊåØ„ÇäËøî„Çã„Å®„ÄÅ„Äå${concept.concept1}„Äç„Åß„ÅÆÁµåÈ®ì„Åå‰ªäÂõû„ÅÆ„Äå${concept.concept2}„Äç„ÅÆÁêÜËß£„Å´Ê¥ª„Åã„Åõ„Åù„ÅÜ„Åß„Åô„ÄÇÊÆµÈöéÁöÑ„Å´ÈÄ≤„ÇÅ„Å¶„ÅÑ„Åç„Åæ„Åó„Çá„ÅÜ„ÄÇ`;
            default:
                return `„Äå${concept.concept1}„Äç„Å®„Äå${concept.concept2}„Äç„ÅÆ„Å§„Å™„Åå„Çä„ÇíÊÑèË≠ò„Åó„Å™„Åå„Çâ„ÄÅ„ÅÇ„Å™„Åü„Å´ÊúÄÈÅ©„Å™ÊÉÖÂ†±„Çí„Åä‰ºù„Åà„Åó„Åæ„Åô„ÄÇ`;
        }
    }

    generateContinuityResponse(userInput, recentTopic, general) {
        return `ÂâçÂõû„ÅÆ„Äå${recentTopic}„Äç„Åã„ÇâÁô∫Â±ï„Åó„Å¶„ÄÅ‰ªäÂõû„ÅÆ„ÉÜ„Éº„Éû„ÇÇÊ∑±„ÅèÊé¢Ê±Ç„Åó„Å¶„ÅÑ„Åç„Åæ„Åó„Çá„ÅÜ„ÄÇ„ÅÇ„Å™„Åü„ÅÆÂ≠¶Áøí„ÅÆÊµÅ„Çå„ÇíÂ§ßÂàá„Å´„Åó„Å™„Åå„Çâ„ÄÅÊñ∞„Åó„ÅÑË¶ñÁÇπ„ÇÇÂä†„Åà„Å¶„ÅäÁ≠î„Åà„Åó„Åæ„Åô„ÄÇ`;
    }

    /**
     * „Ç∑„Çπ„ÉÜ„É†Áµ±Ë®àÂèñÂæó
     */
    getSystemStats() {
        return {
            ...this.stats,
            successRate: this.stats.totalRequests > 0 ? this.stats.successfulResponses / this.stats.totalRequests : 0,
            config: this.config,
            uptime: Date.now() - this.stats.lastProcessingTime
        };
    }
}

// „Éá„Éï„Ç©„É´„Éà„Ç§„É≥„Çπ„Çø„É≥„Çπ
export const enhancedResponseGenerationEngineV2 = new EnhancedResponseGenerationEngineV2();